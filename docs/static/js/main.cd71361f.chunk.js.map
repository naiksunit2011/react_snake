{"version":3,"sources":["Bang/Bang.js","Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Bang","react_default","a","createElement","className","this","props","showFireWork","Component","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleFlag","isStart","size","speed","snakeLength","winnerSnakeLength","foodId","currentX","currentY","direction","buttonName","gameOver","isInfinite","state","currentDarkPixel","createFood","board","i","rows","j","id","push","key","darkPixel","indexOf","rowId","_this2","endGame","increaseSpeed","length","shift","setState","interval","setTimeout","createSnake","declareWinner","Math","floor","random","e","_this3","clearInterval","thisRef","keyCode","startSnake","_this4","document","addEventListener","handleControl","removeEventListener","_this5","src_Bang_Bang","renderBoard","onClick","App","src_Board_Board","class","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd71361f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Bang.css';\r\n\r\nclass Bang extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className={'fireWork ' + this.props.showFireWork}>\r\n                <div className=\"before\"></div>\r\n                <div className=\"after\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Bang;","import React, { Component } from 'react';\r\nimport Bang from '../Bang/Bang.js';\r\nimport './Board.css';\r\n\r\nclass Board extends Component {\r\n\r\n    toggleFlag = 0\r\n    isStart = false;\r\n    size = 15;\r\n    speed = 200;\r\n    snakeLength = 5;\r\n    winnerSnakeLength = 10;\r\n    foodId = \"0_5\";\r\n    currentX = 0;\r\n    currentY = 0;\r\n    direction = \"R\";\r\n    buttonName = \"Start/Stop\";\r\n    gameOver = \"\";\r\n    isInfinite = true;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDarkPixel: [],\r\n            showFireWork: \"\"\r\n        };\r\n        this.foodId = this.createFood();\r\n    }\r\n\r\n    renderBoard() {\r\n        var board = [];\r\n        for (var i = 0; i < this.size; i++) {\r\n            var rows = [];\r\n            for (var j = 0; j < this.size; j++) {\r\n                var id = i + \"_\" + j;\r\n                if (this.foodId === id) {\r\n                    rows.push(<div id={id} key={id} className={'board-pixel dark-pixel'}></div>);\r\n                } else {\r\n                    var darkPixel = (this.state.currentDarkPixel.indexOf(id) >= 0) ? \"dark-pixel\" : \"\";\r\n                    rows.push(<div id={id} key={id} className={'board-pixel ' + darkPixel}></div>);\r\n                }\r\n            }\r\n            var rowId = \"Row_\" + i;\r\n            board.push(<div id={rowId} key={rowId} className=\"board-row\">{rows}</div>);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    createSnake() {\r\n\r\n        var id = this.currentX + \"_\" + this.currentY;\r\n        if (this.state.currentDarkPixel.indexOf(id) >= 0) {\r\n            this.endGame();\r\n        }\r\n\r\n        this.state.currentDarkPixel.push(id);\r\n        if (this.foodId === id) {\r\n            this.foodId = this.createFood();\r\n            this.snakeLength = this.snakeLength + 1;\r\n            this.increaseSpeed();\r\n        }\r\n\r\n        if (this.state.currentDarkPixel.length > this.snakeLength)\r\n            this.state.currentDarkPixel.shift();\r\n\r\n        var direction = this.direction;\r\n        if (direction === \"U\") {\r\n            this.currentX = this.currentX - 1;\r\n            if (this.currentX < 0) {\r\n                if (this.isInfinite)\r\n                    this.currentX = this.size;\r\n                else\r\n                    this.endGame();\r\n            }\r\n        } else if (direction === \"D\") {\r\n            this.currentX = this.currentX + 1;\r\n            if (this.currentX > this.size) {\r\n                if (this.isInfinite)\r\n                    this.currentX = 0;\r\n                else\r\n                    this.endGame();\r\n            }\r\n        } else if (direction === \"L\") {\r\n            this.currentY = this.currentY - 1;\r\n            if (this.currentY < 0) {\r\n                if (this.isInfinite)\r\n                    this.currentY = this.size;\r\n                else\r\n                    this.endGame();\r\n            }\r\n        } else if (direction === \"R\") {\r\n            this.currentY = this.currentY + 1;\r\n            if (this.currentY > this.size) {\r\n                if (this.isInfinite)\r\n                    this.currentY = 0;\r\n                else\r\n                    this.endGame();\r\n            }\r\n        }\r\n        this.setState({ currentDarkPixel: this.state.currentDarkPixel, showFireWork: this.state.showFireWork });\r\n        if (this.isStart)\r\n            this.interval = setTimeout(() => this.createSnake(), this.speed);\r\n    }\r\n\r\n    increaseSpeed() {\r\n        if (this.winnerSnakeLength === this.snakeLength) {\r\n            this.declareWinner();\r\n        }\r\n        this.speed = this.speed - 10;\r\n    }\r\n\r\n    createFood() {\r\n        var foodX = Math.floor(Math.random() * this.size);\r\n        var foodY = Math.floor(Math.random() * this.size);\r\n        return foodX + \"_\" + foodY;\r\n    }\r\n\r\n    startSnake(e) {\r\n        if (this.isStart) {\r\n            this.isStart = false;\r\n            clearInterval(this.interval);\r\n        } else {\r\n            this.isStart = true;\r\n            this.interval = setTimeout(() => this.createSnake(), this.speed);\r\n        }\r\n    }\r\n\r\n    endGame() {\r\n        this.isStart = false;\r\n        clearInterval(this.interval);\r\n        this.gameOver = \"Game over!!!\";\r\n    }\r\n\r\n    declareWinner() {\r\n        this.isStart = false;\r\n        clearInterval(this.interval);\r\n        this.gameOver = \"Winner winner chicken dinner!!!\";\r\n        this.setState({ currentDarkPixel: [], showFireWork: \"showFireWork\" });\r\n    }\r\n\r\n    handleControl(e, thisRef) {\r\n        if (e.keyCode === 37 && this.direction !== \"R\") {\r\n            thisRef.direction = \"L\";\r\n        } else if (e.keyCode === 38 && this.direction !== \"D\") {\r\n            thisRef.direction = \"U\";\r\n        } else if (e.keyCode === 39 && this.direction !== \"L\") {\r\n            thisRef.direction = \"R\";\r\n        } else if (e.keyCode === 40 && this.direction !== \"U\") {\r\n            thisRef.direction = \"D\";\r\n        } else if (e.keyCode === 13) {\r\n            thisRef.startSnake(e);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', (e) => {\r\n            this.handleControl(e, this);\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keydown', this.handleControl);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Bang showFireWork={this.state.showFireWork} />\r\n                <div className=\"board-header-wrapper\">\r\n                    <span>Total Score : {(this.snakeLength-5)*2}</span>\r\n                </div>\r\n                <div className=\"board-inner-wrapper\">{this.renderBoard()}</div>\r\n                <div className=\"board-control-wrapper\">\r\n                    <button id=\"startBtn\" key=\"startBtn\" onClick={(e) => this.startSnake(e)}>{this.buttonName}</button>\r\n                </div>\r\n                <div className=\"board-footer-wrapper\">\r\n                    <span>{this.gameOver}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport Board from './Board/Board.js';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n//test \r\n  render() {\r\n    return (\r\n      <div className=\"outter-wrapper\">\r\n        \r\n        <div className=\"header\">\r\n          <span>Snake Game</span>\r\n        </div>\r\n        <div className=\"board\">\r\n          <Board/>\r\n        </div>\r\n        <div class=\"footer-wrapper\">\r\n          Made with <span role=\"img\" aria-label=\"heart\">❤️</span> in India <span role=\"img\" aria-label=\"star\">★</span> By Sunit Naik\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}